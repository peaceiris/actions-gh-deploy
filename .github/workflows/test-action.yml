name: Test Action

on:
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
  pull_request:
    types:
      - opened
      - synchronize
    paths-ignore:
      - '*.md'

jobs:
  skipci:
    runs-on: ubuntu-18.04
    steps:
      - run: echo "[Skip CI] ${{ contains(github.event.head_commit.message, '[skip ci]') }}"

  test:
    runs-on: ${{ matrix.os }}
    if: contains(github.event.head_commit.message, '[skip ci]') == false
    strategy:
      max-parallel: 1
      matrix:
        os:
          - 'ubuntu-18.04'
          - 'macos-latest'
          - 'windows-latest'
    steps:
      - uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "::set-output name=NVMRC::$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Clean npm cache directory  # To remove global installed packages on runners
        run: npm cache clear --force

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci

      - name: Remove lint-staged husky
        run: |
          npm uninstall lint-staged husky
          git checkout package-lock.json package.json

      - run: npm run build

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.3.5'

      - name: Build
        working-directory: ./test_projects/mdbook
        run: mdbook build

      - name: Prepare tag
        id: prepare_tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME="${GITHUB_REF##refs/tags/}"
          echo "::set-output name=tag_name::${TAG_NAME}"
          echo "::set-output name=deploy_tag_name::deploy-${TAG_NAME}"

      - name: Deploy
        if: matrix.os != 'windows-latest'
        uses: ./
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          # github_token: ${{ secrets.GITHUB_TOKEN }}
          # publish_branch: gh-pages
          publish_dir: ./test_projects/mdbook/book
          # external_repository: ''
          allow_empty_commit: true
          # keep_files: true
          # force_orphan: true
          # user_name: iris
          # user_email: email@peaceiris.com
          # commit_message: ${{ github.event.head_commit.message }}
          # tag_name: ${{ steps.prepare_tag.outputs.deploy_tag_name }}
          # tag_message: 'Deployment ${{ steps.prepare_tag.outputs.tag_name }}'

      - name: Deploy
        if: matrix.os == 'windows-latest'
        uses: ./
        with:
          # deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # personal_token: ${{ secrets.PERSONAL_TOKEN }}
          # publish_branch: gh-pages
          publish_dir: ./test_projects/mdbook/book
          # external_repository: ''
          allow_empty_commit: true
          # keep_files: true
          # force_orphan: true
          # user_name: iris
          # user_email: email@peaceiris.com
          # commit_message: ${{ github.event.head_commit.message }}
          # tag_name: ${{ steps.prepare_tag.outputs.deploy_tag_name }}
          # tag_message: 'Deployment ${{ steps.prepare_tag.outputs.tag_name }}'
